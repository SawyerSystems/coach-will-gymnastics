üîß REPLIT FEATURE PROMPT: Booking Flow Fixes & Schema Reflection
üß© OVERVIEW

Kill the old parent recognition form.
It should no longer use phone or email to identify a returning parent. Instead:
Replace that modal with a Login modal.
Use the same logic as the current /login page, including email code flow.
After successful login, automatically close the login modal and continue the booking process in a new modal from Step 1: Lesson Type.
Universal Booking Flow = Always Start at Lesson Type
Regardless of how the user got to the booking (parent portal, athlete profile, admin modal, or homepage), the first step should ALWAYS be Lesson Type.
Don‚Äôt auto-start booking from Athlete or Schedule ‚Äî always begin from scratch, even if athlete is preselected.
Lesson Type step defines whether it‚Äôs private/semi-private, which affects athlete selection logic downstream.
Frontend Athlete Schema Sync
Athlete model now includes firstName and lastName, but the front-end still shows only name.
Update the following to use firstName and lastName:
Athlete Detail Modal
Edit Athlete Modal
Booking flow dropdowns
Admin tables and cards
Manual Booking Flow Fixes (Admin Panel)
When booking manually, give admin ability to:
Select an existing athlete from a dropdown OR create a new athlete on the fly.
If selecting an existing athlete:
Auto-fill the parent info (name, email, phone).
If a Stripe customer exists, attach the booking to the correct Stripe ID.
If creating a new athlete:
Require first/last name, age, experience level, and associate with an existing or new parent.
Auto-create the parent account just like in public booking.
Once athlete is selected or created, follow same booking flow: Lesson Type ‚Üí Schedule ‚Üí Waiver ‚Üí Payment.
üîê AUTH / LOGIN FLOW
Enforce modal login requirement before any returning user booking.
No parent (even if returning) can bypass login using phone/email if they‚Äôre in the system.
New parents = full flow creates their account on Stripe + in DB after successful payment.
üß™ DATA VALIDATION + SECURITY
Frontend: All forms must validate required fields before proceeding.
Backend: Sanitize and verify all input.
Athlete names: trim, max 50 chars, no special characters except hyphens and apostrophes.
Email: valid format.
Phone: numeric-only, 10‚Äì15 chars.
Use zod or similar schema validation on API level.
Prevent unauthorized bookings or data overwrite via protected API endpoints.
üì± MOBILE + UI/UX LOGIC
Ensure all booking modals are:
Full screen on mobile
Have visible step indicators
Clear CTAs for "Next" and "Back"
Allow user to exit with confirmation modal to prevent data loss
üß† STATE MGMT
Use global state or context to persist booking steps if user navigates between modals (e.g., bookingFlowContext).
Save athlete info temporarily during session until booking complete.
‚úÖ RESULT
No more confusion about what step a user is on
Login modal replaces legacy recognition modal
Schema is reflected everywhere in UI
Admin can now actually do their job with proper flexibility