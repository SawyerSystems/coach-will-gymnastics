// GOAL:
// Completely overhaul the booking process to implement systematic modal flows based on session type and user context.

// TECHNOLOGY ASSUMPTIONS:
// - Frontend: React + TailwindCSS
// - Backend: Express + PostgreSQL + Drizzle ORM
// - Auth: Email code-based via Resend/Auth service

// -------------------
// BACKEND DATABASE UPDATES:
// -------------------

1. **Update Athlete Schema**:
   - Add `first_name` and `last_name` columns
   - Migrate existing data from `name` to split `first_name` and `last_name`
   - Update related joins and queries in backend logic and admin tools

2. **Parent Auth System (Updated)**:
   - Logged in parents skip email/phone input step
   - New parents still use email+phone until payment, which triggers account creation

3. **Admin Manual Booking Flow**:
   - When admin books a session, create a parent account for that parent if it doesn't already exist
   - Save parent info and mark auth type as "manual"


// -------------------
// FRONTEND MODAL LOGIC:
// -------------------

### State Management (React Context or Zustand)

- `bookingFlowType`: "parent-portal", "athlete-modal", "new-user"
- `selectedLessonType`
- `selectedAthletes`
- `selectedTimeSlot`
- `parentInfo`
- `safetyContact`
- `waiverStatus`
- `paymentStatus`

### Modal Flow Per Booking Context:

```js
// FLOW DEFINITION (used in BookingWizard.js or BookingFlowProvider.js)
const bookingFlows = {
  'parent-portal': [
    'lessonType',
    'athleteSelect',
    'schedule',
    'parentConfirm', // prefilled, editable
    'safety',
    'waiver',
    'payment',
  ],
  'athlete-modal': [
    'lessonType',
    'athleteSelectIfSemi', // skip if not semi-private
    'schedule',
    'parentConfirm',
    'safety',
    'waiver',
    'payment',
  ],
  'new-user': [
    'lessonType',
    'athleteInfoForm',
    'schedule',
    'parentInfoForm',
    'safety',
    'waiver',
    'payment',
  ]
};
```

- Detect current booking context based on:
  - If parent is logged in: use "parent-portal"
  - If parent starts from an athlete modal: use "athlete-modal"
  - If no auth session, default to "new-user"


// -------------------
// API ROUTES (Express)
// -------------------

**PATCH `/api/athlete/update-name`**  
- Validates string length and sanitation (XSS)
- Splits and stores first_name + last_name

**POST `/api/booking/manual-booking`**  
- Creates parent if not exist
- Creates athlete if needed
- Creates session
- Sends email to parent with auth link

**POST `/api/booking/new-user-flow`**  
- Accepts athlete info, parent info, waiver
- Validates and sanitizes input
- Stores everything, then triggers payment intent
- Creates account upon successful payment webhook

**GET `/api/waiver/:athleteId`**
- Returns current waiver status


// -------------------
// FRONTEND UI/UX DETAILS:
// -------------------

- **Thumb-Friendly Sizing**: All modals/components use Tailwind's `min-w-[280px]`, `text-lg`, `rounded-xl`, `py-3 px-4`
- **Prefill Parent Info**: On login, fetch `/api/parent/me` and prefill fields
- **Waiver Step**: Check if waiver exists before showing form (auto-skip if valid)
- **Safety Step**: Store `dropOffContact` and `pickupContact`


// -------------------
// ERROR HANDLING
// -------------------

- Prevent reaching `schedule` step before lesson type selected
- If API fails (e.g., no time slot), show toast: "There was an error loading availability. Please try again."
- Waiver errors (invalid date, blank name, etc) return inline validation messages
- Authentication required error removed for new parents


// -------------------
// SECURITY & VALIDATION
// -------------------

- Input sanitized using DOMPurify or backend sanitation
- Waiver/Parent data validated server-side
- Prevent account creation unless payment confirmed (use webhook)


// -------------------
// ACCESSIBILITY & MOBILE
// -------------------

- Modal flow is fully mobile responsive (min height 100vh on small screens)
- All buttons have `aria-label`
- Uses `useFocusTrap` for each step modal


// -------------------
// FINAL PROMPT
// -------------------

**Prompt to Replit AI:**

> Overhaul my React + Express booking system to use distinct modal flows based on session user type:
> 
> 1. Detect if parent is logged in and booking from parent dashboard, an athlete detail modal, or as a brand new user.
> 2. Based on context, implement a different step flow in the modals (lesson type, athlete select, schedule, parent info, safety, waiver, payment).
> 3. Use Zustand or Context API to manage step state.
> 4. Add client+server validation, full mobile responsiveness, and accessibility.
> 5. Fix new parent flow that currently returns "auth required"â€”this should only apply after booking.
> 6. Update database to store athlete first/last names and update current records.
> 7. Ensure waiver step is universal and always checked.
> 8. Update admin manual booking to automatically create parent accounts and skip unnecessary parent confirmations.