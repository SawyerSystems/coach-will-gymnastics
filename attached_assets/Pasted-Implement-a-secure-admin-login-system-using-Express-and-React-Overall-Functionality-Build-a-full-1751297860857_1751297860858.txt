Implement a secure admin login system using Express and React.
🔁 Overall Functionality
Build a full authentication system where the admin logs in using an email and password. The backend should handle secure session storage using Express sessions and cookies. If a user is not authenticated, they should be redirected to the login page. Once logged in, they can access all /admin routes. Logging out should end the session and redirect them back to the login screen.
🔧 Backend (Express)
Dependencies Required:
express-session
bcrypt
cookie-parser
connect-pg-simple (or similar session store for PostgreSQL)
cors
helmet
Session Configuration:
app.use(session({
  store: new pgSession({ pool }), // PostgreSQL session store
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 1000 * 60 * 60 // 1 hour
  }
}));
Auth Routes:
POST /api/auth/login
Accepts email and password
Validates both fields (server-side, required, valid email format)
Checks if admin exists
Verifies password using bcrypt.compare
If valid, creates session: req.session.adminId = admin.id
Responds with success or error message
GET /api/auth/logout
Destroys session and clears cookie
Responds with confirmation
GET /api/auth/status
Returns current login status ({ loggedIn: true/false })
Middleware: isAdminAuthenticated
Use this middleware on all admin routes (/admin/*)
If req.session.adminId doesn't exist, respond with 401 or redirect to login
🗃️ Database
Table: admins
id SERIAL PRIMARY KEY
email TEXT UNIQUE NOT NULL
password_hash TEXT NOT NULL
created_at TIMESTAMP DEFAULT now()
🌐 Frontend (React)
Pages/Routes:
/login (login form)
/admin/* (protected admin area)
Components:
<LoginForm />: email, password inputs
<AdminLayout />: wraps all admin pages and checks login state
<PrivateRoute />: HOC or wrapper to protect /admin routes
Form Handling:
Validate fields on submit (email format, password not empty)
Show inline errors
On submit:
POST to /api/auth/login
If success, redirect to /admin/dashboard
If error, show toast/error message
Global Auth State:
Use a global state (e.g. React Context or Zustand)
Track isAuthenticated status
On app load, call /api/auth/status to sync state
🧼 Data Validation + Error Handling
Client-Side:
Required fields, email regex, no empty password
Server-Side:
Sanitize inputs using express-validator or validator
Return clear error messages (400, 401, 500)
Rate Limiting (optional): Add basic rate limiting on login route to prevent brute-force
🧑‍🦯 Accessibility & Mobile Responsiveness
Use semantic HTML (<form>, <label for="password">)
ARIA labels where needed
Inputs should be responsive and large enough for thumb tap
Button should be type="submit" with keyboard Enter support
🔐 Security Best Practices
Passwords are hashed using bcrypt.hash(password, 10)
Sessions stored securely with HttpOnly, secure, and a strong SESSION_SECRET
Cookies never exposed to JavaScript
Input fields sanitized to prevent XSS or injection
Admin login only allowed from known admin email(s)
✅ User Flow Summary
Admin visits /login
Enters email + password → validated → POST request
If correct, session is created → redirected to /admin/dashboard
All /admin/* routes are protected by session middleware
Clicking “Logout” → destroys session → redirects to login
📣 User Feedback & States
✅ Loading state on login button
❌ Show inline errors (wrong credentials, missing fields)
⏳ Spinner while checking session on app load
✅ Show toast or alert on logout success
💡 You may also add a “Remember Me” checkbox to extend session length optionally.