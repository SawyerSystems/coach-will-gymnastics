Perform a complete, top-to-bottom codebase analysis for CoachWillTumbles.com.

DO NOT summarize tables or suggest vague changes.

Instead, provide a comprehensive breakdown of how the entire platform works behind the scenes — across frontend, backend, and Supabase — including all file paths, components, endpoints, flows, hooks, and data syncing logic.

Here’s exactly what I need:

---

1. 🌐 SITE MAP
List all functional areas (e.g., Home, Booking Form, Parent Dashboard, Admin Panel, Blog/Tips, etc.)

2. 🧩 COMPONENTS
List all key React components by file and function, and explain:
- How they get their data
- How state is managed
- What API calls they depend on
- What actions trigger downstream effects (e.g., booking confirmation triggers Stripe payment -> email -> DB insert)

3. 🔗 API ROUTES
List all API endpoints and what they do:
- URLs and methods (GET, POST, etc.)
- What tables they touch in Supabase
- Any logic inside (e.g., validation, middleware, formatting)
- External APIs (Stripe, Resend, etc.)

4. 🔄 DATABASE INTEGRATION
- For each key user action (booking, creating athlete, posting tip, etc.), explain the full database flow: what tables are written to, read from, or updated
- Identify fields that are hardcoded instead of dynamic (like lesson types, fees, etc.)

5. 🔐 AUTH & SESSIONS
- Describe the login/auth system in full (email code based)
- How sessions are stored and tracked (if at all)
- Any leftover or unused Supabase auth integration

6. 🪝 WEBHOOKS & BACKEND HOOKS
- Where and how Stripe webhooks are received and processed
- What events are fired (e.g., payment -> booking update -> email)

7. 📦 BUCKETS / STORAGE
- Where uploaded media is stored
- How the site accesses Supabase buckets (if used)
- Which tables link to which media

8. 📊 ADMIN PANEL
- What exact routes and components are used for admin tools
- What admins can do (CRUD for bookings, users, blog/tips, view payments, etc.)
- What tables are updated on admin actions

9. 🧠 LOGIC GAPS & REDUNDANCIES
- Point out tables or files that are unused
- Identify where logic is duplicated across files
- Highlight fields or features not connected to any system

10. 🔧 INFRASTRUCTURE
- What environment variables are required
- How deployment is handled
- Whether any caching, throttling, or security middleware exists

11. 👨‍👩‍👧 PARENT PORTAL (FULL BREAKDOWN)
What URL or route does the parent portal live on?
What data is pulled when a parent logs in or lands on their dashboard?
How are bookings, waivers, athletes, and contact info fetched and displayed?
Are parents allowed to:
Add/edit athletes?
View upcoming sessions?
Reschedule or cancel?
Sign waivers or upload forms?
Submit testimonials?
Where is this data saved?
What logic handles parent-specific views vs admin views?
What session or auth mechanism controls parent access?

12. 📅 BOOKING PROCESS (FULL STEP-BY-STEP FLOW)
From the moment a parent clicks “Book a Session,” break down everything:

Page/component used
What frontend component is used for the form?
What fields are collected? (name, athlete info, date, focus areas, etc.)
Lesson/focus selection
Where are lesson types and focus areas pulled from?
Is this hardcoded or dynamic from Supabase?
Slot reservation logic
How are available times generated and checked?
What happens if a slot expires?
Stripe Integration
When is Stripe Checkout triggered?
What metadata is passed to Stripe?
What is returned from Stripe?
Where is that response stored?
Post-payment actions
Is a webhook fired?
What booking table fields are updated (e.g., status, payment_status, gym_fee)?
Is an email confirmation sent? Which system sends it?
Is the booking shown in the parent portal?
Admin sync
How does the admin dashboard pick up new bookings?
What filters apply (e.g., “Pending,” “Upcoming,” “Paid”)?
Are new bookings visible instantly or via webhook update?

🧾 END GOAL
We want to:

Remove hardcoded logic from the booking process
Link all steps to normalized tables (like lesson_types, focus_areas, gym_fees)
Ensure parent actions affect correct tables
Detect missing or misused database relations
Fully map webhook-to-dashboard flow---

DO NOT make assumptions. Base all output on actual file references in the codebase. I want to use this audit to rebuild the database from scratch, eliminate dead code, and unify the logic between frontend, backend, and Supabase.