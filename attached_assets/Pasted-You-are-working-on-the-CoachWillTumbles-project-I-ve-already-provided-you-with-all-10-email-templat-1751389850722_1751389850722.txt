You are working on the CoachWillTumbles project. I’ve already provided you with all 10 email templates using react-email. Your job is to:

1. **Install Required Packages:**
   - Install `@react-email/render` for converting JSX email templates into HTML.
   - Install the `resend` SDK to send emails via Resend’s API.

2. **Use Real App Variables:**
   - All variables inside the templates (e.g. `parentName`, `athleteName`, `sessionDate`, etc.) are EXAMPLES.
   - Do not hardcode these. Instead, replace them with real variables or data already available in the backend project logic when sending emails.

3. **Set Up Resend:**
   - Create a new `Resend` instance using the API key from the `.env` file:
     ```ts
     const resend = new Resend(process.env.RESEND_API_KEY);
     ```

4. **Create a Utility Function for Sending Emails:**
   - In a `lib/email.ts` (or similar), create a function `sendEmail({ type, data })` that:
     - Dynamically renders the appropriate email template based on the `type` (`'session-confirmation'`, `'waiver-reminder'`, etc.)
     - Uses `render(<EmailComponent {...data} />)` from `@react-email/render`
     - Sends the resulting HTML via `resend.emails.send({ ... })`
     - Accepts params like `to`, `subject`, and `componentData`

5. **Subject Lines and Templates Mapping:**
   - Map each email type to the correct subject line and component:
     ```ts
     const emailTemplates = {
       'parent-auth': { subject: '🗝️ Access Code to Begin Your Journey', component: ParentAuthorization },
       'session-confirmation': { subject: '✅ Session Confirmed! — Coach Will Tumbles', component: SessionConfirmation },
       'manual-booking': { subject: '⚠️ Confirm Your Session Booking', component: ManualBookingConfirmation },
       'waiver-reminder': { subject: '📜 Complete Your Training Scroll', component: WaiverReminder },
       'session-reminder': { subject: '⏰ Adventure Incoming!', component: SessionReminder },
       'session-cancelled': { subject: '❌ Session Cancelled — Let’s Reschedule!', component: SessionCancellation },
       'reschedule-confirmation': { subject: '🔄 New Adventure Scheduled!', component: RescheduleConfirmation },
       'session-follow-up': { subject: '🏆 Training with Coach Will!', component: SessionFollowUp },
       'birthday': { subject: '🎉 Happy Birthday from Coach Will!', component: BirthdayEmail },
       'new-tip': { subject: '✨ New Tip Unlocked on Your Journey!', component: NewTipOrBlog }
     };
     ```

6. **When to Trigger Emails:**
   - Parent Auth Code: When a parent enters their phone/email
   - Session Confirmation: After a parent books or confirms
   - Manual Booking: When admin manually books
   - Waiver Reminder: If waiver is not on file
   - Session Reminder: 24 hours before
   - Cancellation: Immediately on cancel
   - Reschedule: After rescheduling
   - Follow-Up: 2 hours after session ends
   - Birthday: On the athlete’s birthday
   - Tip/Blog: When new content is posted

7. **Mobile-Friendly Emails:**
   - All email components are built using react-email and are already mobile-optimized via inline styles.
   - Just make sure `render()` is used properly and emails are tested on mobile views.

8. **Do NOT send test emails to real users until the system is live and verified.**
   - Use test inboxes or logs during development.

Let me know if you need the templates reloaded. They're already formatted and ready.
