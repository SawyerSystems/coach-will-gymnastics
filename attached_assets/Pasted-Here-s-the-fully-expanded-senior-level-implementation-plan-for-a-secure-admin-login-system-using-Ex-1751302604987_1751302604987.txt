Here‚Äôs the fully expanded, senior-level implementation plan for a secure admin login system using Express sessions. This is optimized for a React + Express + PostgreSQL + Drizzle ORM + Tailwind CSS stack.

‚∏ª

üîê Admin Login System (Full Production-Ready Plan)

‚∏ª

üß± 1. Database Setup (Drizzle ORM)

‚úÖ File:

/server/models/users.ts

‚úÖ Schema:

import { pgTable, text, uuid, timestamp } from "drizzle-orm/pg-core";

export const users = pgTable("users", {
  id: uuid("id").defaultRandom().primaryKey(),
  email: text("email").notNull().unique(),
  passwordHash: text("password_hash").notNull(),
  role: text("role").default("admin"), // For future expansion (coach, etc.)
  createdAt: timestamp("created_at").defaultNow(),
});

üîç Drizzle Migration:

npx drizzle-kit push


‚∏ª

üåê 2. Backend Setup

‚úÖ Session Setup

File: /server/index.ts

Install dependencies:

npm install express-session connect-pg-simple bcrypt dotenv

Add session middleware:

import session from "express-session";
import pgSession from "connect-pg-simple";
import { pool } from "./db";

const PgSession = pgSession(session);

app.use(session({
  store: new PgSession({
    pool: pool, // pg-pool instance
  }),
  secret: process.env.SESSION_SECRET!,
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    maxAge: 1000 * 60 * 60 * 24, // 1 day
  }
}));


‚∏ª

‚úÖ Auth Routes

File: /server/routes/auth.ts

import express from "express";
import bcrypt from "bcrypt";
import { db } from "../db";
import { users } from "../models/users";
import { eq } from "drizzle-orm";

const router = express.Router();

router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password)
      return res.status(400).json({ error: "Email and password are required" });

    const [user] = await db.select().from(users).where(eq(users.email, email));

    if (!user)
      return res.status(401).json({ error: "Invalid credentials" });

    const match = await bcrypt.compare(password, user.passwordHash);

    if (!match)
      return res.status(401).json({ error: "Invalid credentials" });

    req.session.userId = user.id;
    req.session.role = user.role;

    res.json({ success: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server error" });
  }
});

router.post("/logout", (req, res) => {
  req.session.destroy(err => {
    if (err) return res.status(500).json({ error: "Failed to logout" });
    res.clearCookie("connect.sid");
    res.json({ success: true });
  });
});

router.get("/me", (req, res) => {
  if (!req.session.userId) return res.status(401).json({ error: "Not authenticated" });
  res.json({ userId: req.session.userId, role: req.session.role });
});

export default router;

Protect Admin Routes

File: /server/middleware/auth.ts

export function requireAdmin(req, res, next) {
  if (req.session?.role === "admin") {
    return next();
  }
  return res.status(403).json({ error: "Access denied" });
}


‚∏ª

üé® 3. Frontend (React + Tailwind)

‚úÖ Folder: /client/src/pages/adminLogin.tsx

import { useState } from "react";

export default function AdminLogin() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleLogin = async (e) => {
    e.preventDefault();
    setError("");

    const res = await fetch("/api/auth/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password }),
    });

    const data = await res.json();

    if (!res.ok) {
      setError(data.error || "Login failed");
    } else {
      window.location.href = "/admin"; // Redirect on success
    }
  };

  return (
    <div className="max-w-md mx-auto mt-20 p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-4">Admin Login</h1>
      <form onSubmit={handleLogin}>
        <input type="email" placeholder="Email" className="input" value={email} onChange={e => setEmail(e.target.value)} />
        <input type="password" placeholder="Password" className="input mt-2" value={password} onChange={e => setPassword(e.target.value)} />
        {error && <p className="text-red-500 mt-2">{error}</p>}
        <button type="submit" className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded mt-4 w-full">
          Login
        </button>
      </form>
    </div>
  );
}

Reusable styles:

Create .input class in Tailwind config or just define common input styling in global.css.

‚∏ª

üîê 4. Protect Admin Pages in React

File: /client/src/pages/admin.tsx

import { useEffect, useState } from "react";

export default function AdminPanel() {
  const [loading, setLoading] = useState(true);
  const [authorized, setAuthorized] = useState(false);

  useEffect(() => {
    fetch("/api/auth/me")
      .then(res => res.json())
      .then(data => {
        if (data.userId && data.role === "admin") {
          setAuthorized(true);
        }
        setLoading(false);
      });
  }, []);

  if (loading) return <p>Loading...</p>;
  if (!authorized) return <p>Access Denied</p>;

  return <div>/* Admin content here */</div>;
}


‚∏ª

üöß 5. Edge Cases & Error Handling

Issue	Handling
Empty input	400 w/ user message
Incorrect email/pass	401 w/ generic message
Session store fails	500 internal error
Route protection	middleware returns 403
Session tampering	rely on cookie signature and expiration


‚∏ª

üîê 6. Security Best Practices
	‚Ä¢	Use secure: true in cookie config on HTTPS
	‚Ä¢	Store passwords only as bcrypt hashes
	‚Ä¢	Do not expose specific login failure reasons to prevent user enumeration
	‚Ä¢	Store session secret in .env and rotate periodically

‚∏ª

‚úÖ 7. Final Touches
	‚Ä¢	Add .env:

SESSION_SECRET=supersecretlongstring

	‚Ä¢	Register /api/auth routes in server/index.ts:

import authRoutes from "./routes/auth";
app.use("/api/auth", authRoutes);


‚∏ª

Let me know if you want me to generate this into a checklist or code scaffold file tree, or build the logout & auth redirect logic next.