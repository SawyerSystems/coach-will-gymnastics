require('dotenv').config();
const fs = require('fs');
const path = require('path');

async function run() {
  console.log('🧪 Testing manual invoice PDF export endpoint...');
  // 1) Login as admin
  const loginRes = await fetch('http://localhost:5001/api/auth/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      email: process.env.ADMIN_EMAIL || 'admin@coachwilltumbles.com',
      password: process.env.ADMIN_PASSWORD || 'TumbleCoach2025!'
    })
  });
  if (!loginRes.ok) {
    const txt = await loginRes.text();
    throw new Error(`Login failed: ${loginRes.status} ${txt}`);
  }
  const setCookie = loginRes.headers.get('set-cookie');
  if (!setCookie) throw new Error('No session cookie returned');
  console.log('🔐 Logged in.');

  // 2) Fetch athletes to resolve at least one valid athleteId
  const athletesRes = await fetch('http://localhost:5001/api/athletes', {
    headers: { Cookie: setCookie },
  });
  if (!athletesRes.ok) {
    const txt = await athletesRes.text();
    throw new Error(`Fetch athletes failed: ${athletesRes.status} ${txt}`);
  }
  const athletes = await athletesRes.json();
  const first = athletes?.[0];
  if (!first) throw new Error('No athletes found to use in invoice test');
  console.log(`👤 Using athlete: ${first.id} ${first.name || `${first.firstName} ${first.lastName}`}`);

  // 3) Build invoice payload
  const today = new Date();
  const isoDate = today.toISOString().slice(0, 10);
  const payload = {
    invoiceTitle: 'Manual Statement – Test',
    periodStart: isoDate,
    periodEnd: isoDate,
    timezone: 'America/Los_Angeles',
    notes: 'Automated test invoice generated by test-manual-invoice.cjs',
    lineItems: [
      {
        athleteId: first.id,
        date: isoDate,
        durationMinutes: 60,
        member: true,
        rateCents: 2000,
        description: 'Private coaching session',
      },
      {
        athleteName: 'Ad Hoc Athlete',
        date: isoDate,
        amountCents: 1500,
        description: 'One-time assessment fee',
      },
    ],
  };

  // 4) Call manual invoice export endpoint
  const res = await fetch('http://localhost:5001/api/admin/invoices/manual/export.pdf', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Cookie: setCookie,
    },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const txt = await res.text();
    throw new Error(`Manual invoice export failed: ${res.status} ${txt}`);
  }
  const contentType = res.headers.get('content-type');
  if (!contentType || !contentType.includes('application/pdf')) {
    throw new Error(`Unexpected content-type: ${contentType}`);
  }
  const arrayBuf = await res.arrayBuffer();
  const outPath = path.join(process.cwd(), 'manual-invoice-test.pdf');
  fs.writeFileSync(outPath, Buffer.from(arrayBuf));
  console.log(`✅ PDF saved: ${outPath} (${arrayBuf.byteLength} bytes)`);
}

run().catch((err) => {
  console.error('❌ Test failed:', err?.message || err);
  process.exit(1);
});
